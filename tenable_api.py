import requests
import csv
import time
from configparser import ConfigParser
import argparse
import datetime
import sys

# Global Variables
HEADERS = {'X-ApiKeys': "", 'accept': 'application/json', 'content-type': 'application/json'}  # Default Headers
SCAN_ENDPOINT = "https://cloud.tenable.com/scans/"  # Scan Engpoint
VULNERABILITES_ENDPOINT = "https://cloud.tenable.com/vulns/export"  # Endpoint URL
CONF_FILENAME = './tenable_fp.conf'  # Default configuration file
CURRENT_DATE = datetime.datetime.now().strftime('%Y%m%d%H%M%S')


# Handles Switches for script
def parse_args(args: list = []) -> object:
    parser = argparse.ArgumentParser(description='Pull CVEs from Tenable Scanner for use with the Flashpoint Platform. An Access Key, Secret Key \
        and Scan ID must be provided or a configuration file using the -config tag. A default configuration file can be stored in the same \
        directory as this script with the name of tenable_fp.conf which should be provided with this script.')
    parser.add_argument('-access', type=str, help='Access key for Tenable')
    parser.add_argument('-secret', type=str, help='Secret Key for Tenable')
    parser.add_argument('-scan', type=str, help='Scan id (#)')
    parser.add_argument('-config', type=str, default=CONF_FILENAME, help='Path to a Configuration File')

    return parser.parse_args(args)


# Grabs information from the latest scan
def get_latest_scan_info(scan_id: int) -> (str, str, dict, str):
    data_store = api_call("get", f"{SCAN_ENDPOINT}{scan_id}", HEADERS)
    schedule_uuid = data_store["info"]["schedule_uuid"]
    scan_start = data_store["info"]["scan_start"]
    scan_name = data_store["info"]["name"]
    payload = {"num_assets": 1000, "filters": {"last_found": scan_start}}

    return (schedule_uuid, scan_start, payload, scan_name)


# Parses Vulnerability list using the scan uuid and epoch time
def get_vulnerabilities_list(schedule_uuid: str = '', scan_start: str = '', payload: dict = {}) -> list:
    data_store = api_call("post", VULNERABILITES_ENDPOINT, HEADERS, payload)
    export_uuid = data_store["export_uuid"]
    temp_cve_list = []

    while(True):
        data_store = api_call("get", f'https://cloud.tenable.com/vulns/export/{export_uuid}/status', HEADERS)
        if data_store["status"] != "FINISHED":
            time.sleep(10)
        else:
            chunk_list = data_store["chunks_available"]
            break

    for x in chunk_list:
        data_store = api_call("get", f'https://cloud.tenable.com/vulns/export/{export_uuid}/chunks/{x}', HEADERS)
        for y in data_store:
            if y["scan"]["schedule_uuid"] == schedule_uuid:
                if "cve" in y["plugin"]:
                    for z in y["plugin"]["cve"]:
                        if z in temp_cve_list:
                            pass
                        else:
                            temp_cve_list.append(z)
                    pass
            else:
                pass
    return temp_cve_list


# Performs a HTTP get or post request
def api_call(request: str = 'get', url: str = '', headers: dict = {}, payload: dict = {}) -> dict:
    try:
        if request == 'get':
            response = requests.get(url, headers=HEADERS)
        elif request == 'post':
            response = requests.post(url, headers=HEADERS, json=payload)
    except Exception as e:
        print(f"Issue with {request}: {e}")
        sys.exit(1)

    return response.json()


# Will set the api keys into the HEADERS variable
def set_authentication(access_key: str = '', secret_key: str = '') -> None:
    HEADERS["X-ApiKeys"] = f"accessKey={access_key}; secretKey={secret_key}"


# Will grab the tenable configuration from the default or specified file if no
# switches are specified
def get_tenable_config(conf_filename: str = CONF_FILENAME) -> int:
    try:
        parser = ConfigParser()
        parser.read(conf_filename)
        for key, value in parser.items('tenable_keys'):
            if key == 'access_key':
                access_key = value
            if key == 'secret_key':
                secret_key = value
        for key, value in parser.items('tenable_scan'):
            scan_id = value
        set_authentication(access_key, secret_key)
        return (scan_id)
    except Exception as e:
        print(f"Configuration file issue: {e}")
        sys.exit(1)


# Exports CVEs to txt file and csv file
def export_cves(scan_name: str = 'Scan', cve_list: list = []) -> None:
    with open(f"{scan_name}_cve_{CURRENT_DATE}.txt", 'w') as f:
        search_string = ''
        if cve_list:
            for x in cve_list:
                search_string += f'"{x}" | '
            search_string = search_string[:-3]
            f.write(search_string)
        else:
            f.write("No CVEs Found")

    with open(f"{scan_name}_cve_{CURRENT_DATE}.csv", 'w') as f:
        writer = csv.writer(f, delimiter=',')
        if cve_list:
            writer.writerow(cve_list)
        else:
            writer.writerow(["No CVEs Found"])


def main(args: list = []) -> None:
    args = parse_args(args)
    if (args.access and args.secret and args.scan) is not None:
        set_authentication(args.access, args.secret)
        scan_id = args.scan
    else:
        scan_id = get_tenable_config(args.config)
    schedule_uuid, scan_start, payload, scan_name = get_latest_scan_info(scan_id)
    cve_list = get_vulnerabilities_list(schedule_uuid, scan_start, payload)
    export_cves(scan_name, cve_list)


if __name__ == '__main__':
    main(sys.argv[1:])
